// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: social.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Social_FriendApply_FullMethodName       = "/proto.Social/FriendApply"
	Social_FriendApplyHandle_FullMethodName = "/proto.Social/FriendApplyHandle"
	Social_ListFriendApply_FullMethodName   = "/proto.Social/ListFriendApply"
	Social_ListFriend_FullMethodName        = "/proto.Social/ListFriend"
	Social_GroupCreate_FullMethodName       = "/proto.Social/GroupCreate"
	Social_GroupApply_FullMethodName        = "/proto.Social/GroupApply"
	Social_ListGroupApply_FullMethodName    = "/proto.Social/ListGroupApply"
	Social_GroupApplyHandle_FullMethodName  = "/proto.Social/GroupApplyHandle"
	Social_ListGroup_FullMethodName         = "/proto.Social/ListGroup"
	Social_ListGroupMember_FullMethodName   = "/proto.Social/ListGroupMember"
)

// SocialClient is the client API for Social service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocialClient interface {
	// 1、添加好友
	FriendApply(ctx context.Context, in *FriendApplyReq, opts ...grpc.CallOption) (*FriendApplyResp, error)
	// 2、处理好友申请
	FriendApplyHandle(ctx context.Context, in *FriendApplyHandleReq, opts ...grpc.CallOption) (*FriendApplyHandleResp, error)
	// 3、列出好友申请
	ListFriendApply(ctx context.Context, in *FriendApplyListReq, opts ...grpc.CallOption) (*FriendApplyListResp, error)
	// 4、列出好友
	ListFriend(ctx context.Context, in *ListFriendReq, opts ...grpc.CallOption) (*ListFriendResp, error)
	// 1. 创建群组
	GroupCreate(ctx context.Context, in *GroupCreateReq, opts ...grpc.CallOption) (*GroupCreateResp, error)
	// 2. 添加群众
	GroupApply(ctx context.Context, in *GroupApplyReq, opts ...grpc.CallOption) (*GroupApplyResp, error)
	// 3、列出群组申请
	ListGroupApply(ctx context.Context, in *ListGroupApplyReq, opts ...grpc.CallOption) (*ListGroupApplyResp, error)
	// 4. 处理加群申请
	GroupApplyHandle(ctx context.Context, in *GroupApplyHandleReq, opts ...grpc.CallOption) (*GroupApplyHandleResp, error)
	// 5. 列出群组
	ListGroup(ctx context.Context, in *ListGroupReq, opts ...grpc.CallOption) (*ListGroupResp, error)
	// 6. 列出群成员
	ListGroupMember(ctx context.Context, in *ListGroupMemberReq, opts ...grpc.CallOption) (*ListGroupMemberResp, error)
}

type socialClient struct {
	cc grpc.ClientConnInterface
}

func NewSocialClient(cc grpc.ClientConnInterface) SocialClient {
	return &socialClient{cc}
}

func (c *socialClient) FriendApply(ctx context.Context, in *FriendApplyReq, opts ...grpc.CallOption) (*FriendApplyResp, error) {
	out := new(FriendApplyResp)
	err := c.cc.Invoke(ctx, Social_FriendApply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) FriendApplyHandle(ctx context.Context, in *FriendApplyHandleReq, opts ...grpc.CallOption) (*FriendApplyHandleResp, error) {
	out := new(FriendApplyHandleResp)
	err := c.cc.Invoke(ctx, Social_FriendApplyHandle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) ListFriendApply(ctx context.Context, in *FriendApplyListReq, opts ...grpc.CallOption) (*FriendApplyListResp, error) {
	out := new(FriendApplyListResp)
	err := c.cc.Invoke(ctx, Social_ListFriendApply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) ListFriend(ctx context.Context, in *ListFriendReq, opts ...grpc.CallOption) (*ListFriendResp, error) {
	out := new(ListFriendResp)
	err := c.cc.Invoke(ctx, Social_ListFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GroupCreate(ctx context.Context, in *GroupCreateReq, opts ...grpc.CallOption) (*GroupCreateResp, error) {
	out := new(GroupCreateResp)
	err := c.cc.Invoke(ctx, Social_GroupCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GroupApply(ctx context.Context, in *GroupApplyReq, opts ...grpc.CallOption) (*GroupApplyResp, error) {
	out := new(GroupApplyResp)
	err := c.cc.Invoke(ctx, Social_GroupApply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) ListGroupApply(ctx context.Context, in *ListGroupApplyReq, opts ...grpc.CallOption) (*ListGroupApplyResp, error) {
	out := new(ListGroupApplyResp)
	err := c.cc.Invoke(ctx, Social_ListGroupApply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GroupApplyHandle(ctx context.Context, in *GroupApplyHandleReq, opts ...grpc.CallOption) (*GroupApplyHandleResp, error) {
	out := new(GroupApplyHandleResp)
	err := c.cc.Invoke(ctx, Social_GroupApplyHandle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) ListGroup(ctx context.Context, in *ListGroupReq, opts ...grpc.CallOption) (*ListGroupResp, error) {
	out := new(ListGroupResp)
	err := c.cc.Invoke(ctx, Social_ListGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) ListGroupMember(ctx context.Context, in *ListGroupMemberReq, opts ...grpc.CallOption) (*ListGroupMemberResp, error) {
	out := new(ListGroupMemberResp)
	err := c.cc.Invoke(ctx, Social_ListGroupMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialServer is the server API for Social service.
// All implementations must embed UnimplementedSocialServer
// for forward compatibility
type SocialServer interface {
	// 1、添加好友
	FriendApply(context.Context, *FriendApplyReq) (*FriendApplyResp, error)
	// 2、处理好友申请
	FriendApplyHandle(context.Context, *FriendApplyHandleReq) (*FriendApplyHandleResp, error)
	// 3、列出好友申请
	ListFriendApply(context.Context, *FriendApplyListReq) (*FriendApplyListResp, error)
	// 4、列出好友
	ListFriend(context.Context, *ListFriendReq) (*ListFriendResp, error)
	// 1. 创建群组
	GroupCreate(context.Context, *GroupCreateReq) (*GroupCreateResp, error)
	// 2. 添加群众
	GroupApply(context.Context, *GroupApplyReq) (*GroupApplyResp, error)
	// 3、列出群组申请
	ListGroupApply(context.Context, *ListGroupApplyReq) (*ListGroupApplyResp, error)
	// 4. 处理加群申请
	GroupApplyHandle(context.Context, *GroupApplyHandleReq) (*GroupApplyHandleResp, error)
	// 5. 列出群组
	ListGroup(context.Context, *ListGroupReq) (*ListGroupResp, error)
	// 6. 列出群成员
	ListGroupMember(context.Context, *ListGroupMemberReq) (*ListGroupMemberResp, error)
	mustEmbedUnimplementedSocialServer()
}

// UnimplementedSocialServer must be embedded to have forward compatible implementations.
type UnimplementedSocialServer struct {
}

func (UnimplementedSocialServer) FriendApply(context.Context, *FriendApplyReq) (*FriendApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendApply not implemented")
}
func (UnimplementedSocialServer) FriendApplyHandle(context.Context, *FriendApplyHandleReq) (*FriendApplyHandleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendApplyHandle not implemented")
}
func (UnimplementedSocialServer) ListFriendApply(context.Context, *FriendApplyListReq) (*FriendApplyListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFriendApply not implemented")
}
func (UnimplementedSocialServer) ListFriend(context.Context, *ListFriendReq) (*ListFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFriend not implemented")
}
func (UnimplementedSocialServer) GroupCreate(context.Context, *GroupCreateReq) (*GroupCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupCreate not implemented")
}
func (UnimplementedSocialServer) GroupApply(context.Context, *GroupApplyReq) (*GroupApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupApply not implemented")
}
func (UnimplementedSocialServer) ListGroupApply(context.Context, *ListGroupApplyReq) (*ListGroupApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupApply not implemented")
}
func (UnimplementedSocialServer) GroupApplyHandle(context.Context, *GroupApplyHandleReq) (*GroupApplyHandleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupApplyHandle not implemented")
}
func (UnimplementedSocialServer) ListGroup(context.Context, *ListGroupReq) (*ListGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroup not implemented")
}
func (UnimplementedSocialServer) ListGroupMember(context.Context, *ListGroupMemberReq) (*ListGroupMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupMember not implemented")
}
func (UnimplementedSocialServer) mustEmbedUnimplementedSocialServer() {}

// UnsafeSocialServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialServer will
// result in compilation errors.
type UnsafeSocialServer interface {
	mustEmbedUnimplementedSocialServer()
}

func RegisterSocialServer(s grpc.ServiceRegistrar, srv SocialServer) {
	s.RegisterService(&Social_ServiceDesc, srv)
}

func _Social_FriendApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).FriendApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_FriendApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).FriendApply(ctx, req.(*FriendApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_FriendApplyHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendApplyHandleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).FriendApplyHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_FriendApplyHandle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).FriendApplyHandle(ctx, req.(*FriendApplyHandleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_ListFriendApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendApplyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).ListFriendApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_ListFriendApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).ListFriendApply(ctx, req.(*FriendApplyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_ListFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).ListFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_ListFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).ListFriend(ctx, req.(*ListFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GroupCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GroupCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_GroupCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GroupCreate(ctx, req.(*GroupCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GroupApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GroupApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_GroupApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GroupApply(ctx, req.(*GroupApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_ListGroupApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).ListGroupApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_ListGroupApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).ListGroupApply(ctx, req.(*ListGroupApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GroupApplyHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupApplyHandleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GroupApplyHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_GroupApplyHandle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GroupApplyHandle(ctx, req.(*GroupApplyHandleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_ListGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).ListGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_ListGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).ListGroup(ctx, req.(*ListGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_ListGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).ListGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_ListGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).ListGroupMember(ctx, req.(*ListGroupMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Social_ServiceDesc is the grpc.ServiceDesc for Social service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Social_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Social",
	HandlerType: (*SocialServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FriendApply",
			Handler:    _Social_FriendApply_Handler,
		},
		{
			MethodName: "FriendApplyHandle",
			Handler:    _Social_FriendApplyHandle_Handler,
		},
		{
			MethodName: "ListFriendApply",
			Handler:    _Social_ListFriendApply_Handler,
		},
		{
			MethodName: "ListFriend",
			Handler:    _Social_ListFriend_Handler,
		},
		{
			MethodName: "GroupCreate",
			Handler:    _Social_GroupCreate_Handler,
		},
		{
			MethodName: "GroupApply",
			Handler:    _Social_GroupApply_Handler,
		},
		{
			MethodName: "ListGroupApply",
			Handler:    _Social_ListGroupApply_Handler,
		},
		{
			MethodName: "GroupApplyHandle",
			Handler:    _Social_GroupApplyHandle_Handler,
		},
		{
			MethodName: "ListGroup",
			Handler:    _Social_ListGroup_Handler,
		},
		{
			MethodName: "ListGroupMember",
			Handler:    _Social_ListGroupMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "social.proto",
}
