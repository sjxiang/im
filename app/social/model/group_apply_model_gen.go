// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupApplyFieldNames          = builder.RawFieldNames(&GroupApply{})
	groupApplyRows                = strings.Join(groupApplyFieldNames, ",")
	groupApplyRowsExpectAutoSet   = strings.Join(stringx.Remove(groupApplyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	groupApplyRowsWithPlaceHolder = strings.Join(stringx.Remove(groupApplyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	groupApplyModel interface {
		Insert(ctx context.Context, data *GroupApply) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*GroupApply, error)
		Update(ctx context.Context, data *GroupApply) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultGroupApplyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GroupApply struct {
		Id            uint64         `db:"id"`
		ApplyId       string         `db:"apply_id"`
		GroupId       string         `db:"group_id"`
		ApplyMsg      sql.NullString `db:"apply_msg"`
		ApplyAt       sql.NullTime   `db:"apply_at"`
		JoinSource    sql.NullInt64  `db:"join_source"`
		InviterUserId sql.NullString `db:"inviter_user_id"`
		HandleUserId  sql.NullString `db:"handle_user_id"`
		HandleAt      sql.NullTime   `db:"handle_at"`
		HandleResult  sql.NullInt64  `db:"handle_result"`
	}
)

func newGroupApplyModel(conn sqlx.SqlConn) *defaultGroupApplyModel {
	return &defaultGroupApplyModel{
		conn:  conn,
		table: "`group_apply`",
	}
}

func (m *defaultGroupApplyModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGroupApplyModel) FindOne(ctx context.Context, id uint64) (*GroupApply, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupApplyRows, m.table)
	var resp GroupApply
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupApplyModel) Insert(ctx context.Context, data *GroupApply) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, groupApplyRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ApplyId, data.GroupId, data.ApplyMsg, data.ApplyAt, data.JoinSource, data.InviterUserId, data.HandleUserId, data.HandleAt, data.HandleResult)
	return ret, err
}

func (m *defaultGroupApplyModel) Update(ctx context.Context, data *GroupApply) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, groupApplyRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ApplyId, data.GroupId, data.ApplyMsg, data.ApplyAt, data.JoinSource, data.InviterUserId, data.HandleUserId, data.HandleAt, data.HandleResult, data.Id)
	return err
}

func (m *defaultGroupApplyModel) tableName() string {
	return m.table
}
