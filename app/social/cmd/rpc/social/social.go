// Code generated by goctl. DO NOT EDIT.
// Source: social.proto

package social

import (
	"context"

	"im/app/social/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Friend                = pb.Friend
	FriendApply           = pb.FriendApply
	FriendApplyHandleReq  = pb.FriendApplyHandleReq
	FriendApplyHandleResp = pb.FriendApplyHandleResp
	FriendApplyListReq    = pb.FriendApplyListReq
	FriendApplyListResp   = pb.FriendApplyListResp
	FriendApplyReq        = pb.FriendApplyReq
	FriendApplyResp       = pb.FriendApplyResp
	Group                 = pb.Group
	GroupApply            = pb.GroupApply
	GroupApplyHandleReq   = pb.GroupApplyHandleReq
	GroupApplyHandleResp  = pb.GroupApplyHandleResp
	GroupApplyReq         = pb.GroupApplyReq
	GroupApplyResp        = pb.GroupApplyResp
	GroupCreateReq        = pb.GroupCreateReq
	GroupCreateResp       = pb.GroupCreateResp
	GroupMember           = pb.GroupMember
	ListFriendReq         = pb.ListFriendReq
	ListFriendResp        = pb.ListFriendResp
	ListGroupApplyReq     = pb.ListGroupApplyReq
	ListGroupApplyResp    = pb.ListGroupApplyResp
	ListGroupMemberReq    = pb.ListGroupMemberReq
	ListGroupMemberResp   = pb.ListGroupMemberResp
	ListGroupReq          = pb.ListGroupReq
	ListGroupResp         = pb.ListGroupResp

	Social interface {
		// 1、添加好友
		FriendApply(ctx context.Context, in *FriendApplyReq, opts ...grpc.CallOption) (*FriendApplyResp, error)
		// 2、处理好友申请
		FriendApplyHandle(ctx context.Context, in *FriendApplyHandleReq, opts ...grpc.CallOption) (*FriendApplyHandleResp, error)
		// 3、列出好友申请
		ListFriendApply(ctx context.Context, in *FriendApplyListReq, opts ...grpc.CallOption) (*FriendApplyListResp, error)
		// 4、列出好友
		ListFriend(ctx context.Context, in *ListFriendReq, opts ...grpc.CallOption) (*ListFriendResp, error)
		// 1. 创建群组
		GroupCreate(ctx context.Context, in *GroupCreateReq, opts ...grpc.CallOption) (*GroupCreateResp, error)
		// 2. 添加群众
		GroupApply(ctx context.Context, in *GroupApplyReq, opts ...grpc.CallOption) (*GroupApplyResp, error)
		// 3、列出群组申请
		ListGroupApply(ctx context.Context, in *ListGroupApplyReq, opts ...grpc.CallOption) (*ListGroupApplyResp, error)
		// 4. 处理加群申请
		GroupApplyHandle(ctx context.Context, in *GroupApplyHandleReq, opts ...grpc.CallOption) (*GroupApplyHandleResp, error)
		// 5. 列出群组
		ListGroup(ctx context.Context, in *ListGroupReq, opts ...grpc.CallOption) (*ListGroupResp, error)
		// 6. 列出群成员
		ListGroupMember(ctx context.Context, in *ListGroupMemberReq, opts ...grpc.CallOption) (*ListGroupMemberResp, error)
	}

	defaultSocial struct {
		cli zrpc.Client
	}
)

func NewSocial(cli zrpc.Client) Social {
	return &defaultSocial{
		cli: cli,
	}
}

// 1、添加好友
func (m *defaultSocial) FriendApply(ctx context.Context, in *FriendApplyReq, opts ...grpc.CallOption) (*FriendApplyResp, error) {
	client := pb.NewSocialClient(m.cli.Conn())
	return client.FriendApply(ctx, in, opts...)
}

// 2、处理好友申请
func (m *defaultSocial) FriendApplyHandle(ctx context.Context, in *FriendApplyHandleReq, opts ...grpc.CallOption) (*FriendApplyHandleResp, error) {
	client := pb.NewSocialClient(m.cli.Conn())
	return client.FriendApplyHandle(ctx, in, opts...)
}

// 3、列出好友申请
func (m *defaultSocial) ListFriendApply(ctx context.Context, in *FriendApplyListReq, opts ...grpc.CallOption) (*FriendApplyListResp, error) {
	client := pb.NewSocialClient(m.cli.Conn())
	return client.ListFriendApply(ctx, in, opts...)
}

// 4、列出好友
func (m *defaultSocial) ListFriend(ctx context.Context, in *ListFriendReq, opts ...grpc.CallOption) (*ListFriendResp, error) {
	client := pb.NewSocialClient(m.cli.Conn())
	return client.ListFriend(ctx, in, opts...)
}

// 1. 创建群组
func (m *defaultSocial) GroupCreate(ctx context.Context, in *GroupCreateReq, opts ...grpc.CallOption) (*GroupCreateResp, error) {
	client := pb.NewSocialClient(m.cli.Conn())
	return client.GroupCreate(ctx, in, opts...)
}

// 2. 添加群众
func (m *defaultSocial) GroupApply(ctx context.Context, in *GroupApplyReq, opts ...grpc.CallOption) (*GroupApplyResp, error) {
	client := pb.NewSocialClient(m.cli.Conn())
	return client.GroupApply(ctx, in, opts...)
}

// 3、列出群组申请
func (m *defaultSocial) ListGroupApply(ctx context.Context, in *ListGroupApplyReq, opts ...grpc.CallOption) (*ListGroupApplyResp, error) {
	client := pb.NewSocialClient(m.cli.Conn())
	return client.ListGroupApply(ctx, in, opts...)
}

// 4. 处理加群申请
func (m *defaultSocial) GroupApplyHandle(ctx context.Context, in *GroupApplyHandleReq, opts ...grpc.CallOption) (*GroupApplyHandleResp, error) {
	client := pb.NewSocialClient(m.cli.Conn())
	return client.GroupApplyHandle(ctx, in, opts...)
}

// 5. 列出群组
func (m *defaultSocial) ListGroup(ctx context.Context, in *ListGroupReq, opts ...grpc.CallOption) (*ListGroupResp, error) {
	client := pb.NewSocialClient(m.cli.Conn())
	return client.ListGroup(ctx, in, opts...)
}

// 6. 列出群成员
func (m *defaultSocial) ListGroupMember(ctx context.Context, in *ListGroupMemberReq, opts ...grpc.CallOption) (*ListGroupMemberResp, error) {
	client := pb.NewSocialClient(m.cli.Conn())
	return client.ListGroupMember(ctx, in, opts...)
}
